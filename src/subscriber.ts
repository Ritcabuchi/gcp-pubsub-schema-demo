import { Message, PubSub } from '@google-cloud/pubsub';
import * as dotenv from 'dotenv';
dotenv.config();

const projectId = process.env.PROJECT_ID!;
const topicId = process.env.TOPIC_ID!;
const subscriptionId = process.env.SUBSCRIPTION_ID || `${topicId}-subscription`;

interface UserMessage {
  username: string;
  message: string;
  timestamp: number;
}

interface ValidationResult {
  isValid: boolean;
  errors: string[];
}

function validateMessageSchema(data: any): ValidationResult {
  const errors: string[] = [];
  
  if (!data.username || typeof data.username !== 'string') {
    errors.push('Field "username" is required and must be string');
  }
  if (!data.message || typeof data.message !== 'string') {
    errors.push('Field "message" is required and must be string');
  }
  if (!data.timestamp || typeof data.timestamp !== 'number') {
    errors.push('Field "timestamp" is required and must be number');
  }
  
  const allowedFields = ['username', 'message', 'timestamp'];
  const extraFields = Object.keys(data).filter(key => !allowedFields.includes(key));
  if (extraFields.length > 0) {
    errors.push(`Extra fields found: ${extraFields.join(', ')}`);
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
}

async function createSubscription() {
  const pubsub = new PubSub({ projectId });
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ subscription ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [subscriptions] = await pubsub.getSubscriptions();
    const subscriptionExists = subscriptions.some(sub => 
      sub.name.endsWith(subscriptionId)
    );

    if (!subscriptionExists) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á subscription ‡πÉ‡∏´‡∏°‡πà
      const [subscription] = await pubsub
        .topic(topicId)
        .createSubscription(subscriptionId, {
          // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
          ackDeadlineSeconds: 60, // ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ acknowledge
          messageRetentionDuration: {
            seconds: 86400, // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πâ 1 ‡∏ß‡∏±‡∏ô
          },
          enableMessageOrdering: false,
          // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î dead letter policy (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
          deadLetterPolicy: {
            deadLetterTopic: `projects/${projectId}/topics/${topicId}-dead-letter`,
            maxDeliveryAttempts: 5
          }
        });
      
      console.log(`‚úÖ Subscription ${subscriptionId} created successfully.`);
      return subscription;
    } else {
      console.log(`‚úÖ Subscription ${subscriptionId} already exists.`);
      return pubsub.subscription(subscriptionId);
    }
  } catch (error) {
    console.error('‚ùå Error creating subscription:', error);
    throw error;
  }
}

function createMessageHandler() {
  return (message: Message) => {
    try {
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Buffer ‡πÄ‡∏õ‡πá‡∏ô JSON
      const rawData = JSON.parse(message.data.toString());
      
      console.log('\nüì® ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà:');
      console.log(`   üÜî Message ID: ${message.id}`);
      console.log(`   üìä Attributes:`, message.attributes);
      console.log(`   ÔøΩ Raw Data:`, rawData);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö schema validation
      const validationResult = validateMessageSchema(rawData);
      console.log(`   ‚úÖ Schema Valid: ${validationResult.isValid}`);
      if (!validationResult.isValid) {
        console.log(`   ‚ö†Ô∏è  Schema Errors:`, validationResult.errors);
      }
      
      // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° cast ‡πÄ‡∏õ‡πá‡∏ô UserMessage
      const messageData = rawData as UserMessage;
      if (messageData.username) {
        console.log(`   üìù ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: ${messageData.username}`);
      }
      if (messageData.message) {
        console.log(`   üí¨ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${messageData.message}`);
      }
      if (messageData.timestamp) {
        console.log(`   ‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date(messageData.timestamp).toLocaleString()}`);
      }
      
      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
      processMessage(messageData)
        .then(() => {
          // Acknowledge ‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
          message.ack();
          console.log(`‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ${message.id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
        })
        .catch((error) => {
          console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•:`, error);
          // Nack ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà
          message.nack();
        });
        
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:', error);
      message.nack(); // ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà
    }
  };
}

async function processMessage(messageData: UserMessage): Promise<void> {
  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  // ‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•, ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ
  
  return new Promise((resolve, reject) => {
    // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    setTimeout(() => {
      // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î 10%
      if (Math.random() < 0.1) {
        reject(new Error('‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'));
      } else {
        console.log(`   ‚öôÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å ${messageData.username}...`);
        resolve();
      }
    }, 1000);
  });
}

function createErrorHandler() {
  return (error: Error) => {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:', error);
  };
}

async function startSubscription() {
  try {
    console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Pub/Sub Subscriber...');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á subscription
    const subscription = await createSubscription();
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ message handler
    const messageHandler = createMessageHandler();
    const errorHandler = createErrorHandler();
    
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    subscription.on('message', messageHandler);
    subscription.on('error', errorHandler);
    
    console.log(`üëÇ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ü‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å subscription: ${subscriptionId}`);
    console.log('üì± ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô\n');
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
    process.on('SIGINT', async () => {
      console.log('\n‚èπÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...');
      await subscription.close();
      console.log('‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
      process.exit(0);
    });
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô subscriber:', error);
    process.exit(1);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏£‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
  startSubscription();
}

export { createSubscription, startSubscription };
